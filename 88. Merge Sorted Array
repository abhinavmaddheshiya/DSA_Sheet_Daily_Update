class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int ptrstore=m+n-1;
        int ptrcmp1=m-1;
        int ptrcmp2=n-1;
        if(ptrcmp1<0)nums1=nums2;
        while(ptrcmp1>=0 && ptrcmp2>=0 && ptrstore>=0){
            if(nums1[ptrcmp1]<nums2[ptrcmp2])nums1[ptrstore--]=nums2[ptrcmp2--];
            else{
                nums1[ptrstore--]=nums1[ptrcmp1--];
            }
        }
        while(ptrcmp1>=0)nums1[ptrstore--]=nums1[ptrcmp1--];
        while(ptrcmp2>=0)nums1[ptrstore--]=nums2[ptrcmp2--];
    }
};
/*first attempt
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> ans;
        int i=0,j=0,k=0;
        while(i<m && j<n){
            if(nums1[i]<nums2[j])ans.push_back(nums1[i++]);
            else{ans.push_back(nums2[j++]);}
        }
        while(i<m)ans.push_back(nums1[i++]);
        while(j<n)ans.push_back(nums2[j++]);
        nums1=ans;
    }
};*/
