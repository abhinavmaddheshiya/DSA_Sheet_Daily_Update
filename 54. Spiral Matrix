/*class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m=matrix.size(),n=matrix[0].size();
        int left=0,right=n-1,top=0,bottom=m-1;
        int dir=0;//0123
        /*0 left to right
        1 top to bottom
        2 right to left
        3 bottom to top*/
        vector<int> result;
        while(top<=bottom && left<=right){
            if(dir==0){
                for(int i=left;i<=right;i++){
                    result.push_back(matrix[top][i]);
                }
                top++;
            }else if(dir==1){
                for(int i=top;i<=bottom;i++){
                    result.push_back(matrix[i][right]);
                }
                right--;
            }else if(dir==2){
                for(int i=right;i>=left;i--){
                    result.push_back(matrix[bottom][i]);
                }
                bottom--;
            }else if(dir==3){
                for(int i=bottom;i>=top;i--){
                    result.push_back(matrix[i][left]);
                }
                left++;
            }
            dir=(dir+1)%4;
        }
        return result;
    }
};*/
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int j=0,m=matrix.size(),n=matrix[0].size();
        while(1){
            int i;
            if(j>n-j-1)break;
            for(i=j;i<=n-j-1;i++){
                ans.push_back(matrix[j][i]);
            }
            //for(i=j+1;i<=m-j-2;i++){
            if(j+1>m-j-1)break;
            for(i=j+1;i<=m-j-1;i++){
                ans.push_back(matrix[i][n-j-1]);
            }
            //for(i=n-j-1;i>=j;i--){
            if(n-j-2<j)break;
            for(i=n-j-2;i>=j;i--){
                ans.push_back(matrix[m-j-1][i]);
            }
            if(m-j-2<j+1)break;
            for(i=m-j-2;i>=j+1;i--){
                ans.push_back(matrix[i][j]);
            }
            j++;
        }
        return ans;
    }
};
