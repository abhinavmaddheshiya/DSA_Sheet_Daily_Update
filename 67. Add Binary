class Solution {
public:
    string addBinary(string a, string b) {
        string ans="";
        int i = a.length()-1;
        int j = b.length()-1;
        int carry = 0;
        while(i>=0 || j>=0){
            int numa=0;
            int numb=0;
            if(i>=0)numa=a[i--]-'0';
            if(j>=0)numb=b[j--]-'0';
            int sum = numa+numb+carry;
            if(sum<=1){
                ans+=to_string(sum);
                carry=0;
            }else if(sum==2){
                ans+='0';
                carry=1;
            }else{
                ans+='1';
                carry=1;
            }
        }
        if(carry)ans+='1';
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
/*first attempt
class Solution {
public:
    string helper(string s){
        if(s.length()==0){
            return "";
        }
        string smalloutput = helper(s.substr(1));
        smalloutput+=s[0];
        return smalloutput;
    }
    string addBinary(string a, string b) {
        string revans="";
        int carry=0;
        while(1){
            int asize=a.length();
            int bsize=b.length();
            if(asize==0 || bsize==0)break;
            int a1 = a[asize-1]-'0';
            int b1 = b[bsize-1]-'0';
            int sum = a1+b1+carry;
            if(sum==1){
                char c = sum+'0';
                carry=0;
                revans+=c;
            }else if(sum==0){
                char c = sum+'0';
                carry=0;
                revans+=c;
            }else if(sum==2){
                char c = '0';
                carry = 1;
                revans += c;
            }else{
                char c = '1';
                carry = 1;
                revans += c;
            }
            a=a.substr(0, asize-1);
            b=b.substr(0, bsize-1);
        }
        if(a.length()!=0){
            while(a.length()!=0){
                int len = a.length();
                int num = a[len-1]-'0';
                int sum = carry+num;
                if(sum==0){
                    revans+='0';
                    carry=0;
                }
                else if(sum==1){
                    revans+='1';
                    carry=0;
                }
                else{
                    revans+='0';
                    carry=1;
                }
                a=a.substr(0, len-1);
            }
        }else if(b.length()!=0){
            while(b.length()!=0){
                int len = b.length();
                int num = b[len-1]-'0';
                int sum = carry+num;
                if(sum==0){
                    revans+='0';
                    carry=0;
                }
                else if(sum==1){
                    revans+='1';
                    carry=0;
                }
                else{
                    revans+='0';
                    carry=1;
                }
                b=b.substr(0, len-1);
            }
        }
        if(carry==1)revans+='1';
        return helper(revans);
    }
};
*/
