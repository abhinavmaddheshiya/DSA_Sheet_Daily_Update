class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int mnt=0;
        queue<pair<pair<int,int>, int>> pendingO;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2)pendingO.push({{i,j}, 0});
            }
        }
        int level=0;
        while(!pendingO.empty()){
            pair<pair<int,int>, int> current=pendingO.front();
            pair<int,int> curr=current.first;
            level=current.second;
            int row=curr.first;
            int col=curr.second;
            if(row-1>=0 && grid[row-1][col]==1){
                grid[row-1][col]=2;
                pendingO.push({{row-1, col}, level+1});
            }
            if(col-1>=0 && grid[row][col-1]==1){
                grid[row][col-1]=2;
                pendingO.push({{row, col-1}, level+1});
            }
            if(row+1<m && grid[row+1][col]==1){
                grid[row+1][col]=2;
                pendingO.push({{row+1, col}, level+1});
            }
            if(col+1<n && grid[row][col+1]==1){
                grid[row][col+1]=2;
                pendingO.push({{row, col+1}, level+1});
            }
            pendingO.pop();
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)return -1;
            }
        }
        return level;
    }
};
